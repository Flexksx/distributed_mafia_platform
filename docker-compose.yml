services:
  # =================================================================
  # DATABASE SERVICES
  # =================================================================

  # PostgreSQL for User Management Service
  user-management-db:
    image: postgres:16
    restart: unless-stopped
    environment:
      POSTGRES_USER: mafia_user
      POSTGRES_PASSWORD: mafia_secure_password
      POSTGRES_DB: mafia_users
    volumes:
      - user_management_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mafia_user -d mafia_users"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mafia-network

  # PostgreSQL for Game Service
  game-service-db:
    image: postgres:16
    restart: unless-stopped
    environment:
      POSTGRES_USER: mafia_game_user
      POSTGRES_PASSWORD: mafia_game_secure_password
      POSTGRES_DB: mafia_game
    volumes:
      - game_service_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mafia_game_user -d mafia_game"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mafia-network

  # PostgreSQL for Task Service
  task-service-db:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: task_service_user
      POSTGRES_PASSWORD: task_service_secure_password
      POSTGRES_DB: task_service_db
    volumes:
      - task_service_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U task_service_user -d task_service_db"]
      interval: 5s
      timeout: 3s
      retries: 10
    networks:
      - mafia-network

  # PostgreSQL for Voting Service
  voting-service-db:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: voting_service_user
      POSTGRES_PASSWORD: voting_service_secure_password
      POSTGRES_DB: voting_service_db
    volumes:
      - voting_service_data:/var/lib/postgresql/data
    healthcheck:
      test:
        ["CMD-SHELL", "pg_isready -U voting_service_user -d voting_service_db"]
      interval: 5s
      timeout: 3s
      retries: 10
    networks:
      - mafia-network

  # PostgreSQL for Shop Service
  shop-service-db:
    image: cebanvasile1/shop-service-db:latest
    restart: unless-stopped
    environment:
      POSTGRES_USER: shop_user
      POSTGRES_PASSWORD: shop_password
      POSTGRES_DB: shop_service_db
    volumes:
      - shop_service_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U shop_user -d shop_service_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mafia-network

  # PostgreSQL for Roleplay Service
  roleplay-service-db:
    image: cebanvasile1/roleplay-postgres:latest
    restart: unless-stopped
    environment:
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: secret
      POSTGRES_DB: mydatabase
      LANG: en_US.utf8
    volumes:
      - roleplay_service_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U myuser -d mydatabase"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mafia-network

  # =================================================================
  # APPLICATION SERVICES
  # =================================================================

  # User Management Service (Express.js + TypeScript)
  user-management-service:
    image: flexksx/mafia_user_management_service:latest
    restart: unless-stopped
    depends_on:
      user-management-db:
        condition: service_healthy
    environment:
      PORT: 3000
      NODE_ENV: production
      DATABASE_URL: postgresql://mafia_user:mafia_secure_password@user-management-db:5432/mafia_users?schema=public
      POSTGRES_USER: mafia_user
      POSTGRES_PASSWORD: mafia_secure_password
      POSTGRES_DB: mafia_users
      POSTGRES_PORT: 5432
    ports:
      - "3000:3000"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget -qO- http://localhost:3000/v1/users >/dev/null 2>&1 || exit 1",
        ]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s
    networks:
      - mafia-network

  # Game Service (Express.js + TypeScript)
  game-service:
    image: flexksx/mafia-game-service:latest
    restart: unless-stopped
    depends_on:
      game-service-db:
        condition: service_healthy
      user-management-service:
        condition: service_healthy
    environment:
      PORT: 3001
      NODE_ENV: production
      USER_SERVICE_URL: http://user-management-service:3000
      # Prisma database connection
      DATABASE_URL: postgresql://mafia_game_user:mafia_game_secure_password@game-service-db:5432/mafia_game?schema=public
      # Additional database config for compatibility
      POSTGRES_USER: mafia_game_user
      POSTGRES_PASSWORD: mafia_game_secure_password
      POSTGRES_DB: mafia_game
      POSTGRES_PORT: 5432
    ports:
      - "3001:3001"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget -qO- http://localhost:3001/v1/lobby >/dev/null 2>&1 || exit 1",
        ]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s
    networks:
      - mafia-network

  # Task Service (Express.js + TypeScript + Prisma)
  task-service:
    image: rayderr/mafia_liviu_task_service:latest
    restart: unless-stopped
    depends_on:
      task-service-db:
        condition: service_healthy
      game-service:
        condition: service_healthy
      user-management-service:
        condition: service_healthy
    environment:
      PORT: 3002
      NODE_ENV: production
      DATABASE_URL: postgresql://task_service_user:task_service_secure_password@task-service-db:5432/task_service_db?schema=public
      APP_PORT: 3002
      JWT_SECRET: production-jwt-secret-change-me
    ports:
      - "3002:3002"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget -qO- http://localhost:3002/health >/dev/null 2>&1 || exit 1",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - mafia-network
    # Run migrations as root, then switch to nodejs user for the app
    user: root
    command: sh -c "npx prisma db push --skip-generate && su -s /bin/sh nodejs -c 'node dist/src/server/index.js'"

  # Voting Service (Express.js + TypeScript + Prisma)
  voting-service:
    image: rayderr/mafia_liviu_voting_service:latest
    restart: unless-stopped
    depends_on:
      voting-service-db:
        condition: service_healthy
      game-service:
        condition: service_healthy
      user-management-service:
        condition: service_healthy
      task-service:
        condition: service_healthy
    environment:
      PORT: 3003
      NODE_ENV: production
      DATABASE_URL: postgresql://voting_service_user:voting_service_secure_password@voting-service-db:5432/voting_service_db?schema=public
      APP_PORT: 3003
      JWT_SECRET: production-jwt-secret-change-me
      TIE_BREAK_METHOD: RANDOM
    ports:
      - "3003:3003"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget -qO- http://localhost:3003/health >/dev/null 2>&1 || exit 1",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - mafia-network
    # Run migrations as root, then switch to nodejs user for the app
    user: root
    command: sh -c "npx prisma db push --skip-generate && su -s /bin/sh nodejs -c 'node dist/src/server/index.js'"

  # Shop Service (Spring Boot + Java)
  shop-service:
    image: cebanvasile1/shop-service:latest
    restart: unless-stopped
    depends_on:
      shop-service-db:
        condition: service_healthy
      user-management-service:
        condition: service_healthy
      game-service:
        condition: service_healthy
      task-service:
        condition: service_healthy
    environment:
      # Spring Boot database configuration
      SPRING_DATASOURCE_URL: jdbc:postgresql://shop-service-db:5432/shop_service_db
      SPRING_DATASOURCE_USERNAME: shop_user
      SPRING_DATASOURCE_PASSWORD: shop_password
      # Service URLs for inter-service communication
      CHARACTER_SERVICE_URL: http://user-management-service:3000
      ROLEPLAY_SERVICE_URL: http://game-service:3001
      TASK_SERVICE_URL: http://task-service:3002
    ports:
      - "8081:8081"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget -qO- http://localhost:8081/actuator/health >/dev/null 2>&1 || exit 1",
        ]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 45s
    networks:
      - mafia-network

  # Roleplay Service (Spring Boot + Java)
  roleplay-service:
    image: cebanvasile1/roleplay-service:latest
    restart: unless-stopped
    depends_on:
      roleplay-service-db:
        condition: service_healthy
      user-management-service:
        condition: service_healthy
      game-service:
        condition: service_healthy
    environment:
      # Database configuration
      DB_HOST: roleplay-service-db
      DB_PORT: 5432
      DB_NAME: mydatabase
      DB_USERNAME: myuser
      DB_PASSWORD: secret
      # Application configuration
      SERVER_PORT: 8082
      JPA_DDL_AUTO: update
      JPA_SHOW_SQL: true
      LOG_LEVEL_WEB: DEBUG
      LOG_LEVEL_APP: DEBUG
      # Service URLs for inter-service communication
      USER_SERVICE_URL: http://user-management-service:3000
      GAME_SERVICE_URL: http://game-service:3001
    ports:
      - "8082:8082"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget -qO- http://localhost:8082/actuator/health >/dev/null 2>&1 || exit 1",
        ]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 45s
    networks:
      - mafia-network

# =================================================================
# NETWORKS AND VOLUMES
# =================================================================

volumes:
  user_management_data:
    driver: local
  game_service_data:
    driver: local
  task_service_data:
    driver: local
  voting_service_data:
    driver: local
  shop_service_data:
    driver: local
  roleplay_service_data:
    driver: local

networks:
  mafia-network:
    driver: bridge
