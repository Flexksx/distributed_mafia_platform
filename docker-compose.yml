services:
  # =================================================================
  # DATABASE SERVICES
  # =================================================================

  # PostgreSQL for User Management Service
  user-management-db:
    image: postgres:16
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${USER_SERVICE_POSTGRES_USER}
      POSTGRES_PASSWORD: ${USER_SERVICE_POSTGRES_PASSWORD}
      POSTGRES_DB: ${USER_SERVICE_POSTGRES_DB}
    volumes:
      - user_management_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mafia-network

  # PostgreSQL for Game Service
  game-service-db:
    image: postgres:16
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${GAME_SERVICE_POSTGRES_USER}
      POSTGRES_PASSWORD: ${GAME_SERVICE_POSTGRES_PASSWORD}
      POSTGRES_DB: ${GAME_SERVICE_POSTGRES_DB}
    volumes:
      - game_service_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mafia-network

  # PostgreSQL for Task Service
  task-service-db:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${TASK_SERVICE_POSTGRES_USER}
      POSTGRES_PASSWORD: ${TASK_SERVICE_POSTGRES_PASSWORD}
      POSTGRES_DB: ${TASK_SERVICE_POSTGRES_DB}
    volumes:
      - task_service_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 3s
      retries: 10
    networks:
      - mafia-network

  # PostgreSQL for Voting Service
  voting-service-db:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${VOTING_SERVICE_POSTGRES_USER}
      POSTGRES_PASSWORD: ${VOTING_SERVICE_POSTGRES_PASSWORD}
      POSTGRES_DB: ${VOTING_SERVICE_POSTGRES_DB}
    volumes:
      - voting_service_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 3s
      retries: 10
    networks:
      - mafia-network

  # PostgreSQL for Shop Service
  shop-service-db:
    image: cebanvasile1/shop-service-db:latest
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${SHOP_SERVICE_POSTGRES_USER}
      POSTGRES_PASSWORD: ${SHOP_SERVICE_POSTGRES_PASSWORD}
      POSTGRES_DB: ${SHOP_SERVICE_POSTGRES_DB}
    volumes:
      - shop_service_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mafia-network

  # PostgreSQL for Roleplay Service
  roleplay-service-db:
    image: cebanvasile1/roleplay-postgres:latest
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${ROLEPLAY_SERVICE_POSTGRES_USER}
      POSTGRES_PASSWORD: ${ROLEPLAY_SERVICE_POSTGRES_PASSWORD}
      POSTGRES_DB: ${ROLEPLAY_SERVICE_POSTGRES_DB}
      LANG: en_US.utf8
    volumes:
      - roleplay_service_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mafia-network

  # =================================================================
  # APPLICATION SERVICES
  # =================================================================

  # User Management Service (Express.js + TypeScript)
  user-management-service:
    image: flexksx/mafia_user_management_service:latest
    restart: unless-stopped
    depends_on:
      user-management-db:
        condition: service_healthy
    environment:
      PORT: ${USER_SERVICE_PORT}
      NODE_ENV: production
      DATABASE_URL: postgresql://${USER_SERVICE_POSTGRES_USER}:${USER_SERVICE_POSTGRES_PASSWORD}@user-management-db:${USER_SERVICE_POSTGRES_PORT}/${USER_SERVICE_POSTGRES_DB}?schema=public
      POSTGRES_USER: ${USER_SERVICE_POSTGRES_USER}
      POSTGRES_PASSWORD: ${USER_SERVICE_POSTGRES_PASSWORD}
      POSTGRES_DB: ${USER_SERVICE_POSTGRES_DB}
      POSTGRES_PORT: ${USER_SERVICE_POSTGRES_PORT}
      GATEWAY_URL: http://gateway:${GATEWAY_PORT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget -qO- http://localhost:$$PORT/v1/users >/dev/null 2>&1 || exit 1",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    networks:
      - mafia-network

  # Game Service (Express.js + TypeScript)
  game-service:
    image: flexksx/mafia-game-service:latest
    restart: unless-stopped
    depends_on:
      game-service-db:
        condition: service_healthy
      user-management-service:
        condition: service_healthy
    environment:
      PORT: ${GAME_SERVICE_PORT}
      NODE_ENV: production
      USER_SERVICE_URL: http://user-management-service:${USER_SERVICE_PORT}
      DATABASE_URL: postgresql://${GAME_SERVICE_POSTGRES_USER}:${GAME_SERVICE_POSTGRES_PASSWORD}@game-service-db:${GAME_SERVICE_POSTGRES_PORT}/${GAME_SERVICE_POSTGRES_DB}?schema=public
      POSTGRES_USER: ${GAME_SERVICE_POSTGRES_USER}
      POSTGRES_PASSWORD: ${GAME_SERVICE_POSTGRES_PASSWORD}
      POSTGRES_DB: ${GAME_SERVICE_POSTGRES_DB}
      POSTGRES_PORT: ${GAME_SERVICE_POSTGRES_PORT}
      GATEWAY_URL: http://gateway:${GATEWAY_PORT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget -qO- http://localhost:$$PORT/v1/lobby >/dev/null 2>&1 || exit 1",
        ]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s
    networks:
      - mafia-network

  # Task Service (Express.js + TypeScript + Prisma)
  task-service:
    image: rayderr/mafia_liviu_task_service:latest
    restart: unless-stopped
    depends_on:
      task-service-db:
        condition: service_healthy
      game-service:
        condition: service_healthy
      user-management-service:
        condition: service_healthy
    environment:
      PORT: ${TASK_SERVICE_PORT}
      NODE_ENV: production
      DATABASE_URL: postgresql://${TASK_SERVICE_POSTGRES_USER}:${TASK_SERVICE_POSTGRES_PASSWORD}@task-service-db:${TASK_SERVICE_POSTGRES_PORT}/${TASK_SERVICE_POSTGRES_DB}?schema=public
      APP_PORT: ${TASK_SERVICE_PORT}
      JWT_SECRET: production-jwt-secret-change-me
      GATEWAY_URL: http://gateway:${GATEWAY_PORT}
    ports:
      - "${TASK_SERVICE_PORT}:${TASK_SERVICE_PORT}"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget -qO- http://localhost:$$APP_PORT/health >/dev/null 2>&1 || exit 1",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - mafia-network
    # Run migrations as root, then switch to nodejs user for the app
    user: root
    command: sh -c "npx prisma db push --skip-generate && su -s /bin/sh nodejs -c 'node dist/src/server/index.js'"

  # Voting Service (Express.js + TypeScript + Prisma)
  voting-service:
    image: rayderr/mafia_liviu_voting_service:latest
    restart: unless-stopped
    depends_on:
      voting-service-db:
        condition: service_healthy
      game-service:
        condition: service_healthy
      user-management-service:
        condition: service_healthy
      task-service:
        condition: service_healthy
    environment:
      PORT: ${VOTING_SERVICE_PORT}
      NODE_ENV: production
      DATABASE_URL: postgresql://${VOTING_SERVICE_POSTGRES_USER}:${VOTING_SERVICE_POSTGRES_PASSWORD}@voting-service-db:${VOTING_SERVICE_POSTGRES_PORT}/${VOTING_SERVICE_POSTGRES_DB}?schema=public
      APP_PORT: ${VOTING_SERVICE_PORT}
      JWT_SECRET: production-jwt-secret-change-me
      TIE_BREAK_METHOD: RANDOM
      GATEWAY_URL: http://gateway:${GATEWAY_PORT}
    ports:
      - "${VOTING_SERVICE_PORT}:${VOTING_SERVICE_PORT}"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget -qO- http://localhost:$$APP_PORT/health >/dev/null 2>&1 || exit 1",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - mafia-network
    user: root
    command: sh -c "npx prisma db push --skip-generate && su -s /bin/sh nodejs -c 'node dist/src/server/index.js'"

  # Shop Service (Spring Boot + Java)
  shop-service:
    image: cebanvasile1/shop-service:latest
    restart: unless-stopped
    depends_on:
      shop-service-db:
        condition: service_healthy
      user-management-service:
        condition: service_healthy
      game-service:
        condition: service_healthy
      task-service:
        condition: service_healthy
    environment:
      # Spring Boot database configuration
      SPRING_DATASOURCE_URL: jdbc:postgresql://shop-service-db:${SHOP_SERVICE_POSTGRES_PORT}/${SHOP_SERVICE_POSTGRES_DB}
      SPRING_DATASOURCE_USERNAME: ${SHOP_SERVICE_POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${SHOP_SERVICE_POSTGRES_PASSWORD}
      # Service URLs for inter-service communication
      CHARACTER_SERVICE_URL: http://user-management-service:${USER_SERVICE_PORT}
      ROLEPLAY_SERVICE_URL: http://game-service:${GAME_SERVICE_PORT}
      TASK_SERVICE_URL: http://task-service:${TASK_SERVICE_PORT}
      GATEWAY_URL: http://gateway:${GATEWAY_PORT}
    ports:
      - "${SHOP_SERVICE_PORT}:${SHOP_SERVICE_PORT}"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget -qO- http://localhost:$$SHOP_SERVICE_PORT/actuator/health >/dev/null 2>&1 || exit 1",
        ]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 45s
    networks:
      - mafia-network

  # Roleplay Service (Spring Boot + Java)
  roleplay-service:
    image: cebanvasile1/roleplay-service:latest
    restart: unless-stopped
    depends_on:
      roleplay-service-db:
        condition: service_healthy
      user-management-service:
        condition: service_healthy
      game-service:
        condition: service_healthy
    environment:
      # Database configuration
      DB_HOST: roleplay-service-db
      DB_PORT: ${ROLEPLAY_SERVICE_POSTGRES_PORT}
      DB_NAME: ${ROLEPLAY_SERVICE_POSTGRES_DB}
      DB_USERNAME: ${ROLEPLAY_SERVICE_POSTGRES_USER}
      DB_PASSWORD: ${ROLEPLAY_SERVICE_POSTGRES_PASSWORD}
      # Application configuration
      SERVER_PORT: ${ROLEPLAY_SERVICE_PORT}
      JPA_DDL_AUTO: update
      JPA_SHOW_SQL: true
      LOG_LEVEL_WEB: DEBUG
      LOG_LEVEL_APP: DEBUG
      # Service URLs for inter-service communication
      USER_SERVICE_URL: http://user-management-service:${USER_SERVICE_PORT}
      GAME_SERVICE_URL: http://game-service:${GAME_SERVICE_PORT}
      GATEWAY_URL: http://gateway:${GATEWAY_PORT}
    ports:
      - "${ROLEPLAY_SERVICE_PORT}:${ROLEPLAY_SERVICE_PORT}"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget -qO- http://localhost:$$SERVER_PORT/actuator/health >/dev/null 2>&1 || exit 1",
        ]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 45s
    networks:
      - mafia-network

  # =====
  # GATEWAY
  # =====
  gateway:
    image: flexksx/mafia_api_gateway:main
    restart: unless-stopped
    ports:
      - "${GATEWAY_PORT}:${GATEWAY_PORT}"
    environment:
      PORT: ${GATEWAY_PORT}
      USER_SERVICE_URL: "http://user-management-service:${USER_SERVICE_PORT}"
      GAME_SERVICE_URL: "http://game-service:${GAME_SERVICE_PORT}"
      TASK_SERVICE_URL: "http://task-service:${TASK_SERVICE_PORT}"
      VOTING_SERVICE_URL: "http://voting-service:${VOTING_SERVICE_PORT}"
      JWT_SECRET: ${GATEWAY_JWT_SECRET}
      JWT_ALGORITHM: ${GATEWAY_JWT_ALGORITHM}
      JWT_EXPIRES_SECONDS: ${GATEWAY_JWT_EXPIRES_SECONDS}
      SERVICE_TO_SERVICE_SECRET: ${SERVICE_TO_SERVICE_SECRET}
      HTTP_TIMEOUT_SECONDS: "5"
      MAX_CONCURRENCY: "200"
    depends_on:
      user-management-service:
        condition: service_healthy
      game-service:
        condition: service_healthy
      task-service:
        condition: service_healthy
      voting-service:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget -qO- http://localhost:$$PORT/ >/dev/null 2>&1 || exit 1",
        ]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 20s
    networks:
      - mafia-network

# =================================================================
# NETWORKS AND VOLUMES
# =================================================================

volumes:
  user_management_data:
    driver: local
  game_service_data:
    driver: local
  task_service_data:
    driver: local
  voting_service_data:
    driver: local
  shop_service_data:
    driver: local
  roleplay_service_data:
    driver: local

networks:
  mafia-network:
    driver: bridge
